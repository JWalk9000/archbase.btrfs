#!/bin/env bash


user_packages() {
  display_header
  info_print "By default, in addition to the base system this installer will also install the following packages:"
  for PKG in "${BASE_PKGS[@]}"; do
    info_print "  - $PKG"
  done
  Yn_print "Did you create a userpkgs.txt file with optional packages to install?"
  read -rp "" USERPKGS_FILE
  if [[ "$USERPKGS_FILE" =~ ^([nN][oO]?|[nN])$ ]]; then
    return
  else while true; do
    info_print "=> Checking for userpkgs.txt at $RAW_GITHUB/$REPO/userpkgs.txt"
    sleep 1
    if curl --output /dev/null --silent --head --fail "$RAW_GITHUB/$REPO/userpkgs.txt"; then
      info_print "=> User's packages list will be installed to the system."
      USERPKGS=$(curl -s "$RAW_GITHUB/$REPO/userpkgs.txt")
    break
    else
    warning_print "No userpkgs.txt file found at $RAW_GITHUB/$REPO/userpkgs.txt."
    Yn_print "Would you like to try again? Check the file name and location before proceeding."
    read -rp "" TRY_AGAIN
    if [[ "$TRY_AGAIN" =~ ^([nN][oO]?|[nN])$ ]]; then
        break
    fi
      fi
    done
  fi

  if [[ -z "$USERPKGS" ]]; then
    Yn_print "Would you like to enter the packages manually as a space-separated list?"
    read -rp "" ENTER_MANUALLY
    if [[ "$ENTER_MANUALLY" =~ ^([yY][eE][sS]|[yY])$ ]]; then
      while true; do
        info_print "Enter the packages you would like to install, separated by a space:"
        read -rp "" USERPKGS
        info_print "I will now check that those packages are available to install."
        sleep 1
        verify_packages $USERPKGS
        done
        USERPKGS=$VERIFIED_PKGS
        break
      done
    fi
  fi

  if [[ -n "$USERPKGS" ]]; then
    info_print "The following packages will be installed: $USERPKGS"
  else
    warning_print "No packages to install."
  fi
}


verify_packages() {
  local PKGS="$1"
  for PKG in $PKGS; do
    if ! pacman -Si "$PKG" > /dev/null; then
      warning_print "Package $PKG not found in the repositories."
      Yn_print "Would you like to change the spelling?"
      read -rp "" CHANGE_SPELLING
      if [[ "$CHANGE_SPELLING" =~ ^([yY][eE][sS]|[yY])$ ]]; then
        read -rp "Enter the correct package name: " FIXPKG
        if pacman -Si "$FIXPKG" > /dev/null; then
          VERIFIED_PKGS="$VERIFIED_PKGS $FIXPKG"
        else
          warning_print "Package $FIXPKG not found in the repositories."
          Yn_print "Would you like to try again?"
          read -rp "" TRY_AGAIN
          if [[ "$TRY_AGAIN" =~ ^([yY][eE][sS]|[yY])$ ]]; then
            continue
          else
            break
          fi
        fi
      else
        continue
      fi
    else
      VERIFIED_PKGS="$VERIFIED_PKGS $PKG"
    fi
  done
}